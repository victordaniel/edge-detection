# -*- coding: utf-8 -*-
"""testno17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CJF7mjpFbtlRYNaPvlKi4cgatICD7l9Y
"""

from matplotlib.pyplot import axis
import tweepy
import pandas as pd
import json
import time
import csv
import networkx as nx

my_consumer_key = 'Pta9atcdWOiXnpOXKBphPlrxL'
my_consumer_secret = '1qRMPcLcWXUmQmIjukd8sGlouyYklTtvGcnEbxyG3RdIAVRrtc'
my_access_token = '1262975675725541377-iiSypdf1Dc6rpXqfM2lilaqbx0F0aw'
my_access_secret = 'W3lrEjlefHy9YFJDNqpCWfLbnQDNLvSkkv6zv0Krqcz7R'
my_bearer_token='AAAAAAAAAAAAAAAAAAAAABbzeQEAAAAAWbSmvmyZAkDaLBACfss28eV6o40%3DvjY7c1pWM3E3ycncVd7sjZUkyNLeDUoiDyNhzM7866VUQ2o0Wt'

import configparser
from tweepy import API, Cursor, OAuthHandler

auth = tweepy.OAuthHandler(my_consumer_key, my_consumer_secret)
auth.set_access_token(my_access_token, my_access_secret)
api = tweepy.API(auth)

client = tweepy.Client(
    wait_on_rate_limit = True,
    consumer_key = my_consumer_key,
    consumer_secret = my_consumer_secret,
    access_token = my_access_token,
    access_token_secret = my_access_secret,
    bearer_token = my_bearer_token,
)

client

me = api.get_user(screen_name = "TweepyDeepLear1")
me.id

user_list = ["1545087736071467008"]
follower_list = []
for user in user_list:
    followers = []
    try:
        for page in tweepy.Cursor(api.get_follower_ids, user_id=user).pages():
            followers.extend(page)
            print(len(followers))
    except tweepy.TweepError:
        print("error")
        continue
    follower_list.append(followers)

df = pd.DataFrame(columns=['source','target']) #Empty DataFrame
df['target'] = follower_list[0] #Set the list of followers as the target column
df['source'] = 1545087736071467008 #Set my user ID as the source

import networkx as nx
G = nx.from_pandas_edgelist(df, 'source', 'target') #Turn df into graph
pos = nx.spring_layout(G) #specify layout for visual

import matplotlib.pyplot as plt
f, ax = plt.subplots(figsize=(10, 10))
plt.style.use('ggplot')
nodes = nx.draw_networkx_nodes(G, pos,
                               alpha=0.8)
nodes.set_edgecolor('r')
nx.draw_networkx_labels(G, pos, font_size=8)
nx.draw_networkx_edges(G, pos, width=1.0, alpha=0.2)

from tweepy import TweepyException

from tweepy import errors

user_list = list(df['target']) #Use the list of followers we extracted in the code above i.e. my  followers
for userID in user_list:
    print(userID)
    followers = []
    follower_list = []

    # fetching the user
    user = api.get_user(user_id=1545087736071467008)


    # fetching the followers_count
    followers_count = user.followers_count

    try:
        for page in tweepy.Cursor(api.get_follower_ids, user_id=userID).pages():
            followers.extend(page)
            print(len(followers))
            if followers_count >= 5000: #Only take first 5000 followers
                break
    except tweepy.TweepyException:
        print("error")
        continue
    follower_list.append(followers)
    temp = pd.DataFrame(columns=['source', 'target'])
    temp['target'] = follower_list[0]
    temp['source'] = userID
    df = df.append(temp)
    df.to_csv("networkOfFollowers.csv")

df = pd.read_csv('networkOfFollowers.csv') #Read into a df
G = nx.from_pandas_edgelist(df, 'source', 'target')

G.number_of_nodes() #Find the total number of nodes in this graph

G_sorted = pd.DataFrame(sorted(G.degree, key=lambda x: x[1], reverse=True))
G_sorted.columns = ["nconst"  , "degree"]
G_sorted.head()

u = api.get_user(user_id=	1546573035603464192)
u.screen_name

import community

from community import community_louvain
partition = community_louvain.best_partition(G)
#Turn partition into dataframe
partition1 = pd.DataFrame([partition]).T
partition1 = partition1.reset_index()
partition1.columns = ['names','group']

G_sorted = pd.DataFrame(sorted(G.degree, key=lambda x: x[1], reverse=True))
G_sorted.columns = ["names" , "degree"]
G_sorted.head()
dc = G_sorted

combined = pd.merge(dc,partition1, how='left', left_on="names",right_on="names")

combined

pos = nx.spring_layout(G)
f, ax = plt.subplots(figsize=(10, 10))
plt.style.use('ggplot')
#cc = nx.betweenness_centrality(G2)
nodes = nx.draw_networkx_nodes(G, pos,
                               cmap=plt.cm.Set1,
                               node_color=combined['group'],
                               alpha=0.8)
nodes.set_edgecolor('k')
nx.draw_networkx_labels(G, pos, font_size=8)
nx.draw_networkx_edges(G, pos, width=1.0, alpha=0.2)
plt.savefig('twitterFollowers.png')

#my id : 1545087736071467008
#work done:




#folloers list has been extracted
#followers of followers has been extracted and saved as 'networkOfFollowers.csv'

#visualization is done both for 'followers' and 'followers of followers'

#pending:
#profile downloads of all 'followers of followers'

project1_followers = client.get_users_followers(
     id = 1545087736071467008,
     user_fields = ["created_at", "description","public_metrics","verified",],
    max_results = 1000)

project1_followers_df = pd.DataFrame() #an empty dataframe

for i in project1_followers.data:
   temp_data = pd.json_normalize( i.data ,  sep = "_")
   project1_followers_df = project1_followers_df.append(temp_data,ignore_index=True)

# project1_followers_df

lst=pd.DataFrame(project1_followers_df['id'])  #lst is a dataframe consisting of followers ids and length os lst is 33 i.e 33 followers

# lst
#len(lst)

df1=pd.DataFrame()
df2=pd.DataFrame()

#id2=[]
for userID in lst:
  ids1=[]
  for page in tweepy.Cursor(api.get_followers,id=userID).pages():
    print(userID)
    ids1.extend(page)
    data = [x._json for x in page]
    t2 = pd.DataFrame(data)
    t2 = t2[['id', 'name', 'location', 'description', 'url', 'followers_count', 'friends_count']]
    df2=df2.append(t2)
    time.sleep(60)
    #id2.append(id1)
    temp = pd.DataFrame(columns=['source', 'target'])
    temp['target'] = t2['id']
    temp['source'] = userID
    df1 = df1.append(temp)
    time.sleep(60)
df2.to_csv("f_of_f.csv")